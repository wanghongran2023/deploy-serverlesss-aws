service: serverless-todo-app

plugins:
  - serverless-iam-roles-per-function

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  tracing:
    lambda: true
    apiGateway: true
  environment:
    TODO_TABLE: Todos-wang
    TODO_INDEX: Todo_index_wang
    S3_BUCKET: imagewang202411
    URL_EXPIRATION: 36000
    AUTH_ARN: arn:aws:lambda:us-east-1:765848051216:function:serverless-todo-app-dev-Auth
    GET_TODO_ROLE: lambda-role-get-todo
    CREATE_TODO_ROLE: lambda-role-create-todo
    UPDATE_TODO_ROLE: lambda-role-update-todo
    DELETE_TODO_ROLE: lambda-role-delete-todo
    GENERATE_URL_ROLE: lambda-role-s3 

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer:
            arn: ${self:provider.environment.AUTH_ARN}
    iamRoleStatementsName:  ${self:provider.environment.GET_TODO_ROLE}
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:Query        
        Resource: arn:aws:dynamodb:us-east-1:765848051216:table/${self:provider.environment.TODO_TABLE}
      - Effect: "Allow"
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
        Resource: "*"

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer:
            arn: ${self:provider.environment.AUTH_ARN}
          request:
            schemas:
              application/json: ${file(models/createTodoValidate.json)}
    iamRoleStatementsName:  ${self:provider.environment.CREATE_TODO_ROLE}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:us-east-1:765848051216:table/${self:provider.environment.TODO_TABLE}
      - Effect: "Allow"
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
        Resource: "*"


  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer:
            arn: ${self:provider.environment.AUTH_ARN}
          request:
            schemas:
              application/json: ${file(models/updateTodoValidate.json)}
    iamRoleStatementsName:  ${self:provider.environment.UPDATE_TODO_ROLE}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:us-east-1:765848051216:table/${self:provider.environment.TODO_TABLE}
      - Effect: "Allow"
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
        Resource: "*"


  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer:
            arn: ${self:provider.environment.AUTH_ARN}
    iamRoleStatementsName:  ${self:provider.environment.DELETE_TODO_ROLE}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:us-east-1:765848051216:table/${self:provider.environment.TODO_TABLE}
      - Effect: "Allow"
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
        Resource: "*"


  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer:
            arn: ${self:provider.environment.AUTH_ARN}
    iamRoleStatementsName:  ${self:provider.environment.GENERATE_URL_ROLE}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*

resources:
  Resources:

    ToDoDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TODO_TABLE}
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODO_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          IgnorePublicAcls: false
          BlockPublicPolicy: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*'
        Bucket: !Ref AttachmentsS3Bucket

